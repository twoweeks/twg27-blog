---
interface Props {
	date: string;
	text: string;
	endText: string;
}

const { date, text, endText } = Astro.props;
---

<twg-timer data-date={date} data-text={text} data-end-text={endText}>загрузка...</twg-timer>

<style is:inline>
	twg-timer {
		font-size: 1.5em;

		&:empty {
			display: none;
		}

		& > div:last-child {
			font-size: 1.5em;
		}
	}
</style>

<script>
	class TwgTimer extends HTMLElement {
		constructor() {
			super();

			const { date, text, endText } = this.dataset;
			if (!date || !text || !endText) return;

			const timer = setInterval(() => {
				const timeRemaining = this.getTimeRemaining(date);

				if (timeRemaining.total <= 0) {
					this.innerHTML = `<div>${endText}</div>`;
					clearTimeout(timer);

					return;
				}

				const time = [
					timeRemaining.days,
					timeRemaining.hours,
					timeRemaining.minutes,
					timeRemaining.seconds,
				]
					.map(this.renderNumber)
					.join(':');

				this.innerHTML = `<div>${text}:</div><div>${time}</div>`;
			}, 500);
		}

		// https://gist.github.com/nptit/89e4aa0cd1f5b2b9a258ac0c4e202e02
		private getTimeRemaining = (date: string) => {
			const total = Date.parse(date) - Date.parse(new Date().toISOString());

			const seconds = Math.floor((total / 1000) % 60);
			const minutes = Math.floor((total / 1000 / 60) % 60);
			const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
			const days = Math.floor(total / (1000 * 60 * 60 * 24));

			return { total, days, hours, minutes, seconds };
		};

		private renderNumber = (number: number) => {
			if (number < 10) {
				return `0${number}`;
			}
			return number;
		};
	}

	customElements.define('twg-timer', TwgTimer);
</script>
